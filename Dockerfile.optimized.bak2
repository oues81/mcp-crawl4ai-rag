# ===========================================
# Builder stage - Optimized for CPU only
# ===========================================
FROM python:3.11-alpine as builder

# Set environment variables for build
ENV \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=off \
    # Disable GPU/hardware acceleration
    DISABLE_GPU=1 \
    TF_CPP_MIN_LOG_LEVEL=2 \
    TF_ENABLE_ONEDNN_OPTS=0 \
    TORCH_USE_CUDA=0

# Install build dependencies (minimal set)
RUN apk add --no-cache \
    gcc \
    musl-dev \
    python3-dev \
    libffi-dev \
    openssl-dev \
    cargo \
    && pip install --upgrade pip wheel setuptools

# Create and activate virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install Python dependencies
WORKDIR /app
COPY requirements.txt .

# Install dependencies with optimizations for CPU only
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir \
    --no-binary :all: \
    -r requirements.txt

# ===========================================
# Final image - Optimized for production
# ===========================================
FROM python:3.11-alpine

# Create non-root user and group
RUN addgroup -S appgroup && \
    adduser -S appuser -G appgroup -s /sbin/nologin

# Environment variables
ENV \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=on \
    PATH="/opt/venv/bin:$PATH" \
    PYTHONPATH=/app \
    CRAWL4_AI_BASE_DIRECTORY=/app/data \
    # Disable GPU/hardware acceleration
    DISABLE_GPU=1 \
    TF_CPP_MIN_LOG_LEVEL=2 \
    TF_ENABLE_ONEDNN_OPTS=0 \
    TORCH_USE_CUDA=0 \
    PORT=8051 \
    HOST=0.0.0.0 \
    # Optimize Python for container
    PYTHONFAULTHANDLER=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    # Disable pip version check
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_NO_PYTHON_VERSION_WARNING=1 \
    PIP_ROOT_USER_ACTION=ignore \
    # Optimize PyTorch for CPU
    OMP_NUM_THREADS=1

# Install runtime dependencies (minimal set)
RUN apk add --no-cache \
    libstdc++ \
    curl \
    && rm -rf /var/cache/apk/*

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv

# Create necessary directories with correct permissions
RUN mkdir -p /app/data /app/logs \
    && chown -R appuser:appgroup /app \
    && chmod -R 755 /app/data /app/logs

# Copy application code with proper permissions
COPY --chown=appuser:appgroup . /app/

# Set correct permissions
RUN chown -R appuser:appgroup /app && \
    chmod -R 755 /app/data /app/logs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:8051/health || exit 1

# Expose port
EXPOSE 8051

# Set user and working directory
USER appuser
WORKDIR /app

# Optimize Python runtime
ENV PYTHONUNBUFFERED=1 \
    PYTHONFAULTHANDLER=1 \
    PYTHONHASHSEED=random \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=on \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    # Disable JIT compilation for PyTorch CPU
    PYTORCH_JIT=0 \
    # Disable OpenMP threading
    OMP_NUM_THREADS=1 \
    # Disable MKL threading
    MKL_NUM_THREADS=1 \
    # Disable OpenMP threading for NumPy
    OPENBLAS_NUM_THREADS=1 \
    # Disable OpenMP threading for NumPy
    NUMEXPR_NUM_THREADS=1 \
    # Disable OpenMP threading for NumPy
    VECLIB_MAXIMUM_THREADS=1 \
    # Disable OpenMP threading for NumPy
    MKL_DYNAMIC=FALSE \
    # Disable OpenMP threading for NumPy
    OMP_DYNAMIC=FALSE

# Start command with Uvicorn
CMD ["uvicorn", "src.crawl4ai_mcp:app", "--host", "0.0.0.0", "--port", "8051", "--workers", "1", "--no-access-log"]
