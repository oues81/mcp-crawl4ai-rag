version: '3.8'

# Configuration réseau
networks:
  mcp-network:
    driver: bridge
    name: mcp-crawl4ai-network

# Variables d'environnement communes
x-env: &default-env
  # Configuration du serveur
  TRANSPORT: sse
  HOST: 0.0.0.0
  PORT: 8002  # Port principal du serveur
  
  # Clés API (requises)
  SUPABASE_URL: ${SUPABASE_URL:?"SUPABASE_URL doit être défini"}
  SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY:?"SUPABASE_SERVICE_ROLE_KEY doit être défini"}
  SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY:?"SUPABASE_ANON_KEY doit être défini"}
  
  # Configuration du modèle (optimisé pour CPU)
  MODEL_CHOICE: ${MODEL_CHOICE:-gpt-4}
  
  # Désactiver les fonctionnalités gourmandes en GPU
  USE_CONTEXTUAL_EMBEDDINGS: ${USE_CONTEXTUAL_EMBEDDINGS:-false}
  USE_HYBRID_SEARCH: ${USE_HYBRID_SEARCH:-false}
  USE_AGENTIC_RAG: ${USE_AGENTIC_RAG:-false}
  USE_RERANKING: ${USE_RERANKING:-false}
  USE_KNOWLEDGE_GRAPH: ${USE_KNOWLEDGE_GRAPH:-false}
  
  # Désactiver CUDA et forcer l'utilisation du CPU
  CUDA_VISIBLE_DEVICES: -1
  TF_CPP_MIN_LOG_LEVEL: 2
  TF_ENABLE_ONEDNN_OPTS: 0
  TORCH_USE_CUDA: 0
  PYTORCH_CUDA_ALLOC_CONF: 0
  
  # Optimisations Python
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONFAULTHANDLER: 1
  PYTHONPATH: /app
  
  # Configuration des chemins
  CRAWL4_AI_BASE_DIRECTORY: /app/data
  PLAYWRIGHT_BROWSERS_PATH: /ms-playwright
  
  # Chemins de l'application
  APP_DATA_DIR: /app/data
  LOG_DIR: /app/logs
  
  # Configuration des répertoires de cache
  CACHE_DIR: /app/.cache
  XDG_CACHE_HOME: /app/.cache
  
  # Configuration pour éviter les téléchargements inutiles
  TRANSFORMERS_OFFLINE: 1
  HF_DATASETS_OFFLINE: 1
  HF_EVALUATE_OFFLINE: 1
  HUGGINGFACE_HUB_CACHE: /app/.cache/huggingface/hub
  TORCH_HOME: /app/.cache/torch
  
  # Configuration du logging
  LOG_LEVEL: ${LOG_LEVEL:-INFO}
  
  # Configuration du service
  API_HOST: ${API_HOST:-0.0.0.0}
  API_PORT: ${API_PORT:-8051}

services:
  # Service principal MCP Crawl4AI RAG
  mcp-crawl4ai-rag:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - PYTHONUNBUFFERED=1
        - PYTHONPATH=/app
    
    ports:
      - "${API_PORT:-8051}:8051"
      - 8051:8051
    
    working_dir: /app
    
    environment:
      <<: *default-env
    
    # Volumes en bind mount pour le développement
    volumes:
      # Code source (montage en lecture seule pour éviter d'écraser les fichiers essentiels)
      - ./src:/app/src:ro
      # Données persistantes
      - ./data:/app/data
      # Logs
      - ./logs:/app/logs
      # Cache local
      - ./.cache:/app/.cache
      # Fichiers temporaires
      - /tmp:/tmp
    
    # Configuration des ressources (optimisées pour CPU)
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    
    # Configuration de la santé
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8052/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Redémarrage automatique sauf arrêt manuel
    restart: unless-stopped
    
    # Configuration réseau
    networks:
      - mcp-network
    
    # Mode de démarrage
    command: ["/app/start-mcp-service.sh"]

# Aucun volume nommé nécessaire, tout est en bind mount
